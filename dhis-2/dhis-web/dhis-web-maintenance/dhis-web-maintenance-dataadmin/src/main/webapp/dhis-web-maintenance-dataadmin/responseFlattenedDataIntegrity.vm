#macro( violation $name $list )
    #set( $size = $list.size() )
"$!encoder.jsEncode( ${name} )": [
    #foreach( $o in $list )
    "$!encoder.jsonEncode( ${o} )"#if( $velocityCount < $size ),#end
    #end
]
#end

#macro( violationWithCollection $name $list )
    #set( $listSize = $list.size() )
"$!encoder.jsonEncode( ${name} )": [
    #foreach( $o in $list )
        #set( $oSize = $o.size() )
    "#foreach( $p in $o ) $!encoder.jsonEncode( ${p} ) #if( $velocityCount < $oSize ), #end
    #end "#if( $velocityCount < $listSize ),#end
    #end
]
#end

#macro( violationWithMap $name $map )
    #set( $size = $map.keySet().size() )
"$!encoder.jsonEncode( ${name} )": [
    #foreach( $o in $map.keySet() )
    "$!encoder.jsonEncode( ${o} ): $map.get( $o )"#if( $velocityCount < $size ),#end
    #end
]
#end

#macro( violationWithMapList $name $map )
    #set( $mapSize = $map.keySet().size() )
"$!encoder.jsonEncode( ${name} )": [
    #foreach( $o in $map.keySet() )
        #set( $listSize = $map.get( $o ).size() )
    "$!encoder.jsonEncode( ${o} ):#foreach( $p in $map.get( $o ) ) $!encoder.jsonEncode( ${p} )#if( $velocityCount < $listSize ), #end
    #end "#if( $velocityCount < $mapSize ),#end
    #end
]
#end
{
#violation( "dataElementsWithoutDataSet" $flattenedReport.dataElementsWithoutDataSet ),
#violation( "dataElementsWithoutGroups" $flattenedReport.dataElementsWithoutGroups ),
#violationWithMapList( "dataElementsViolatingExclusiveGroupSets" $flattenedReport.dataElementsViolatingExclusiveGroupSets ),
#violationWithMapList( "dataElementsInDataSetNotInForm" $flattenedReport.dataElementsInDataSetNotInForm ),
#violationWithMapList( "dataElementsAssignedToDataSetsWithDifferentPeriodTypes" $flattenedReport.dataElementsAssignedToDataSetsWithDifferentPeriodTypes ),
#violationWithMapList( "categoryOptionCombosNotInDataElementCategoryCombo" $flattenedReport.categoryOptionCombosNotInDataElementCategoryCombo ),
#violation( "dataSetsNotAssignedToOrganisationUnits" $flattenedReport.dataSetsNotAssignedToOrganisationUnits ),
#violation( "sectionsWithInvalidCategoryCombinations" $flattenedReport.sectionsWithInvalidCategoryCombinations ),
#violationWithCollection( "indicatorsWithIdenticalFormulas" $flattenedReport.indicatorsWithIdenticalFormulas ),
#violation( "indicatorsWithoutGroups" $flattenedReport.indicatorsWithoutGroups ),
#violationWithMap( "invalidIndicatorNumerators" $flattenedReport.invalidIndicatorNumerators ),
#violationWithMap( "invalidIndicatorDenominators" $flattenedReport.invalidIndicatorDenominators ),
#violationWithMapList( "indicatorsViolatingExclusiveGroupSets" $flattenedReport.indicatorsViolatingExclusiveGroupSets ),
#violation( "duplicatePeriods" $flattenedReport.duplicatePeriods ),
#violation( "organisationUnitsWithCyclicReferences" $flattenedReport.organisationUnitsWithCyclicReferences ),
#violation( "orphanedOrganisationUnits" $flattenedReport.orphanedOrganisationUnits ),
#violation( "organisationUnitsWithoutGroups" $flattenedReport.organisationUnitsWithoutGroups ),
#violationWithMapList( "organisationUnitsViolatingExclusiveGroupSets" $flattenedReport.organisationUnitsViolatingExclusiveGroupSets ),
#violation( "organisationUnitGroupsWithoutGroupSets" $flattenedReport.organisationUnitGroupsWithoutGroupSets ),
#violation( "validationRulesWithoutGroups" $flattenedReport.validationRulesWithoutGroups ),
#violationWithMap( "invalidValidationRuleLeftSideExpressions" $flattenedReport.invalidValidationRuleLeftSideExpressions ),
#violationWithMap( "invalidValidationRuleRightSideExpressions" $flattenedReport.invalidValidationRuleRightSideExpressions )
}